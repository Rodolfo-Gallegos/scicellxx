#+STARTUP: showall
#+TITLE: TODO list for SciCell++
#+AUTHOR: Julio César Pérez Sansalvador

* Tuesday, April 21/2020
** TODO
+ Implement full demo for Poisson Equation
+ Integrate the use of Triangle for the generation of points/nodes
+ Work on documentation (How to git with SciCell++ and README.md)
** WORKING ON
*** Delete templates from matrices and linear solvers
   There is really no need for templates since we have a typedef to
   define whether use float or doubles
* SciCell++
** DONE Create factory for matrices and vector
- [DONE] After deleting innecessary templates it seems necessary to
  create a matrices and vectors generator based on whether armadillo
  library is used or not
** DONE Work on the linear solver factory
* DONE Work on Mesh Free Methods
** Need to modify the strategy for memory allocation of matrices and vectors
- [DONE] IF WE DO ALL THE FOLLOWING THE WE WILL NOT REQUIRE TO EXPLICITLY
  CALL FOR THE MEMORY ALLOCATION METHOD WHEN WORKING WITH MATRICES AND VECTORS
- [DONE] Memory allocation is performed if a matrix or vector is created with
  a given size, otherwise, no memory allocation should be performed

- [DONE] Delete the method "allocate_memory()" without arguments to check how
  many parts of the code are affected.

- [DONE] The methods that work with matrices and vectors should initially
  check whether the matrices or vectors have memory allocated, if that
  is the case then check the dimensions, otherwise then create the
  matrices and vectors with the corresponding dimensions.
- [DONE] We should not require to create a matrix or vector with the
  corresponding sizes for operation in order to be able to perform the
  operations, the user SHOULD NOT BE RESPONSIBLE for the sizes of the
  resulting matrices.
- [DONE] Check the flag of memory allocation when creating a matrix with an
  initial size, it should be set to memory allocated since the matrix
  has been given a size therefore memory should have been allocated.
- [DONE] Check how the method for matrices concatenation (armadillo) are
  working in order to know how to do this!!!
** DONE Demos
- DONE Working on Distance Matrix taken from book Mesh Free Approximation
  Methods with MATLAB
- DONE Working on problem of chapter 1
 - 1D
  - Left to review the position of nodes given by an /h/ value, such
   that the distance between nodes is /h/.
  - Then continue with a random generation of nodes' positions
 - 2D
  - Create methods to generate nodes positions
  - Distance between nodes given by an /h/ parameter
  - Random nodes position
- DONE Then move to Chapter 2 of the book and implement the same stuff as
  above
- [DONE] - Then move to Chapter 6 of the book and implement the same
  stuff as above

